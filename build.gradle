plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
	id 'org.cadixdev.licenser' version '0.6.1'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '2.1.1'
	id 'com.github.breadmoirai.github-release' version '2.2.12'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+mc${project.minecraft_version}"
group = project.maven_group

loom { }

repositories {
	maven {
		name "curseforge"
		url "https://minecraft.curseforge.com/api/maven"
	}
	maven {
		name "Terraformers' Maven"
		url "https://maven.terraformersmc.com/releases"
	}
	maven {
		name "Siphalor's maven"
		url "https://maven.siphalor.de"
	}
	maven {
		name "Shedaniel's maven"
		url "https://maven.shedaniel.me/"
	}
	maven {
		name "jitpack"
		url "https://jitpack.io"
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_mappings}"
	modApi "net.fabricmc:fabric-loader:${project.loader_version}"

	modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	include(modImplementation("de.siphalor.tweed4:tweed4-base-$minecraft_major_version:1.7.1+mc1.16.5"))
	include(modImplementation("de.siphalor.tweed4:tweed4-annotated-$minecraft_major_version:1.3.1+mc1.16.5"))
	include(modImplementation("de.siphalor.tweed4:tweed4-data-$minecraft_major_version:1.2.1+mc1.16.5"))
	include(modImplementation("de.siphalor.tweed4:tweed4-data-hjson-$minecraft_major_version:1.1.0+mc1.16.5"))
	include(modImplementation("de.siphalor.tweed4:tweed4-tailor-screen-$minecraft_major_version:1.1.2+mc1.16.5"))
	include(modImplementation("de.siphalor.tweed4:tweed4-tailor-coat-$minecraft_major_version:1.1.3+mc1.16.5"))
	include(modImplementation("de.siphalor:coat-$minecraft_major_version:1.0.0-beta.18+mc1.16.5"))

	modImplementation(include("com.github.Chocohead:Fabric-ASM:v2.1"))

	modImplementation(include("de.siphalor:pushtocraft-1.16:1.0.5+"))
}

license {
	header = project.file('LICENSE_HEADER')

	include '**/*.java'
}

processResources {
	exclude "**/template"
	exclude "**/*.py"

	afterEvaluate {
		from(sourceSets.main.resources.srcDirs) {
			include "fabric.mod.json"
			expand "version": version
			duplicatesStrategy DuplicatesStrategy.INCLUDE
		}
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			java.withSourcesJar()
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

// Mod sites

static def getChangelog() {
	return 'git log -1 --format=format:##%x20%s%n%n%b%nRelease%x20by%x20%an --grep Version'.execute().text.trim()
}

task uploadToModSites {
	dependsOn build
	group = "upload"
}

if (project.hasProperty("curseforgeToken")) {
	curseforge {
		apiKey project.curseforgeToken
		project {
			id = "321743"
			releaseType = project.mod_release
			changelogType = "markdown"
			changelog = project.getChangelog()
			addGameVersion("Fabric")
			for (version in ((String) project.mod_mc_versions).split(";")) {
				addGameVersion(version)
			}
			mainArtifact(remapJar) {
				displayName = "[${project.mod_mc_version_specifier}] ${project.mod_version}"
			}
		}
	}
	uploadToModSites.finalizedBy(tasks.curseforge)
}

modrinth {
	if (project.hasProperty("modrinthToken")) {
		token = project.modrinthToken
		uploadToModSites.finalizedBy(tasks.modrinth)
	}

	projectId = "61Enc3x5"
	versionName = "[$project.mod_mc_version_specifier] $project.mod_version"
	versionType = project.mod_release
	changelog = project.getChangelog()
	uploadFile = remapJar
	gameVersions = project.mod_mc_versions.split(";") as List<String>
	loaders = ["fabric"]
}
tasks.modrinth.group = "upload"

if (project.hasProperty("githubToken")) {
	githubRelease {
		token project.githubToken
		targetCommitish = project.minecraft_major_version
		releaseName = "Version $project.mod_version for $project.mod_mc_version_specifier"
		body = project.getChangelog()
		releaseAssets remapJar.getArchiveFile()
		prerelease = mod_release != "release"
		overwrite = true
	}
	uploadToModSites.finalizedBy(tasks.githubRelease)
}
